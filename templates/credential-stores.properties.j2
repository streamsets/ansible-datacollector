#
# Copyright 2017 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# CredentialStores configuration, this file is included by sdc.properties

# Defines the available Credential Stores IDs. If defining multiple, the IDs must be separated with commas.
# Only include IDs for credential stores that are properly configured.
#credentialStores=jks,vault,cyberark
{% if sdc_credentialStores is defined %}
credentialStores={{ sdc_credentialStores }}
{% endif %}

###############################################
# Java KeyStore CredentialStore Configuration #
###############################################

# Defines the implementation of the 'jks' Credential Store
# The format of the property name is: credentialStore.<ID>.def
# The format of the value is:  <STAGE_LIB_NAME>::<CREDENTIAL_STORE_NAME>
# For other Credential Store replace 'jks' with the corresponding ID
credentialStore.jks.def=streamsets-datacollector-jks-credentialstore-lib::com_streamsets_datacollector_credential_javakeystore_JavaKeyStoreCredentialStore

# Defines the configuration properties of the 'jks' Credential Store
# The format of the property names is: credentialStore.<ID>.config.<CONFIG_NAME>
# For other Credential Store replace 'jks' with the corresponding ID
# The <CONFIG_NAME> are specific to each credential store implementation

# A Java Keystore Credential store can be of type JCEKS or PKCS12
credentialStore.jks.config.keystore.type={{ sdc_credentialStores_jks_keystore_type | default("PKCS12") }}

# The location a name of the Java Keystore. If the specified path is relative, it is assumed it is within the SDC
# configuration directory 'etc/'. Otherwise the absolute location is assumed.
credentialStore.jks.config.keystore.file={{ sdc_credentialStores_jks_keystore_file | default("jks-credentialStore.pkcs12") }}

# The password to be able to read the the Java Keystore
credentialStore.jks.config.keystore.storePassword={{ sdc_credentialStores_jks_keystore_password | default("changeIt") }}

#################################################
# Hashicorp Vault CredentialStore Configuration #
#################################################

# Defines the implementation of the 'vault' Credential Store
# The format of the property name is: credentialStore.<ID>.def
# The format of the value is:  <STAGE_LIB_NAME>::<CREDENTIAL_STORE_NAME>
# For other Credential Store replace 'vault' with the corresponding ID
 credentialStore.vault.def=streamsets-datacollector-vault-credentialstore-lib::com_streamsets_datacollector_credential_vault_VaultCredentialStore

# Vault path-key separator for the name parameter in the credential:get EL function
 credentialStore.vault.config.pathKey.separator={{ sdc_credentialStores_vault_pathkey_separator | default("&") }}

# URL of the vault server to connect to
 credentialStore.vault.config.addr={{ sdc_credentialStores_vault_addr | default("http://localhost:8200") }}

# AppRole mode (recommended) #

 credentialStore.vault.config.role.id={{ sdc_credentialStores_vault_role_id }}
 credentialStore.vault.config.secret.id={{ sdc_credentialStores_vault_secret_id | default('${file("vault-secret-id")}') }}

# App ID mode (deprecated) #

#
# The Vault User ID is generated by hashing the MAC address belonging to the network interface assigned
# the IP address of hostname -f. It can also be retrieved by the show-vault-id command of the
# streamsets executable.
#

# SDC authenticates with Vault using the AppId authentication back-end. The app-id must be specified below.
# credentialStore.vault.config.app.id=

# Optional Settings #

# The renewal interval must be shorter than the shortest lease issued by Vault including auth tokens.
 credentialStore.vault.config.lease.renewal.interval.sec={{ sdc_credentialStores_vault_lease_renewal_interval_sec | default(60) }}
 credentialStore.vault.config.lease.expiration.buffer.sec={{ sdc_credentialStores_vault_lease_expiration_buffer_sec | default(120) }}
 credentialStore.vault.config.open.timeout={{ sdc_credentialStores_vault_open_timeout | default(0) }}
 credentialStore.vault.config.proxy.address={{ sdc_credentialStores_vault_proxy_address | default("") }}
 credentialStore.vault.config.proxy.port={{ sdc_credentialStores_vault_proxy_port | default(8080) }}
 credentialStore.vault.config.proxy.username={{ sdc_credentialStores_vault_proxy_username | default("") }}
 credentialStore.vault.config.proxy.password={{ sdc_credentialStores_vault_proxy_password | default("") }}
 credentialStore.vault.config.read.timeout={{ sdc_credentialStores_vault_read_timeout | default(0) }}
 credentialStore.vault.config.ssl.enabled.protocols={{ sdc_credentialStores_vault_ssl_enabled_protocols | default("TLSv1.2,TLSv1.3") }}
 credentialStore.vault.config.ssl.truststore.file={{ sdc_credentialStores_vault_ssl_truststore_file | default("") }}
 credentialStore.vault.config.ssl.truststore.password={{sdc_credentialStores_vault_ssl_truststore_password | default("") }}
 credentialStore.vault.config.ssl.verify={{ sdc_credentialStores_vault_ssl_verify | default("true") }}
 credentialStore.vault.config.ssl.timeout={{ sdc_credentialStores_vault_ssl_timeout | default(0) }}
 credentialStore.vault.config.timeout={{sdc_credentialStores_vault_timeout | default(0) }}

################################################
#    CyberArk CredentialStore Configuration    #
################################################

# Defines the implementation of the 'cyberark' Credential Store
credentialStore.cyberark.def=streamsets-datacollector-cyberark-credentialstore-lib::com_streamsets_datacollector_credential_cyberark_CyberArkCredentialStore

# Credential refresh interval
# How long a credential can be cached locally before fetching it again from CyberArk.
credentialStore.cyberark.config.credential.refresh.millis={{ sdc_credentialStores_cyberark_credential_refresh_millis | default(30000) }}

# Credential retry interval
# How long to wait to retry fetching a credential from CyberArk in case of error.
#
# This retry delay is not blocking, locally it will fail immediately.
credentialStore.cyberark.config.credential.retry.millis={{ sdc_credentialStores_cyberark_credential_retry_millis | default(15000) }}


# Connector type to CyberArk
# Currently 'webservices' is the only supported connector
credentialStore.cyberark.config.connector={{ sdc_credentialStores_cyberark_connector | default("webservices") }}

#############################################################
#    CyberArk CredentialStore Web-Services Configuration    #
#############################################################

# CyberArk Central Credential Provider credential retrieval web-service URL
#
# There is no default for this property
#credentialStore.cyberark.config.ws.url=https://<HOST>:<PORT>/AIMWebService/api/Accounts
credentialStore.cyberark.config.ws.url={{ sdc_credentialStores_cyberark_ws_url | default("") }}

# CyberArk application ID for this Data Collector
#
# There is no default for this property
credentialStore.cyberark.config.ws.appId={{ sdc_credentialStores_cyberark_ws_appid | default("") }}

# Maximum number of concurrent web-service calls to CyberArk
credentialStore.cyberark.config.ws.maxConcurrentConnections={{ sdc_credentialStores_cyberark_ws_maxconcurrentconnections | default(10) }}

# HTTP connection inactivity check
credentialStore.cyberark.config.ws.validateAfterInactivity.millis={{ sdc_credentialStores_cyberark_ws_validateafterinactivity_millis | default(60000) }}

# TCP and HTTP connection timeout
credentialStore.cyberark.config.ws.connectionTimeout.millis={{ sdc_credentialStores_cyberark_ws_connectiontimeout_millis | default(10000) }}


# Default separator for CyberArk Safe, Folder, Object name and Object element  used in the name parameter of the
# Credential EL functions. For example:
#
#     ${credential:get("cyberark", "all", "MySafe&Root\\MyFolder&MyObject&Content", "")}
#
# This separator can be overridden in the EL function invocation. For example:
#
#     ${credential:get("cyberark", "all", "MySafe|Root\\MyFolder|MyObject|Content", "separator=|")}
#
credentialStore.cyberark.config.ws.nameSeparator={{ sdc_credentialStores_cyberark_ws_nameseparator | default("&") }}

# HTTP authentication mechanism used by CyberArk Central Credential Provider web-services
#
# Posible values: none, basic, digest
credentialStore.cyberark.config.ws.http.authentication={{ sdc_credentialStores_cyberark_ws_http_authentication | default("none") }}

# User name if using basic or digest authentication
#
# There is no default for this property
credentialStore.cyberark.config.ws.http.authentication.user={{ sdc_credentialStores_cyberark_ws_http_authentication_user | default("") }}

# Password if using basic or digest authentication
#
# There is no default for this property
credentialStore.cyberark.config.ws.http.authentication.password={{ sdc_credentialStores_cyberark_ws_http_authentication_password | default("") }}

# If using HTTPS and the server certificate is not signed by a public CA a truststore
# with the public certificate must be available in this truststore file (or in the JDK default truststore).
#
# The path can be absolute or relative, if  relative it is looked for in the Data Collector configuration directory, etc/
#
# There is no default for this property
credentialStore.cyberark.config.ws.truststoreFile={{ sdc_credentialStores_cyberark_ws_truststorefile | default("") }}

# The password to access the truststore file.
#
# There is no default for this property
credentialStore.cyberark.config.ws.truststorePassword={{ sdc_credentialStores_cyberark_ws_truststorepassword | default("") }}

# The HTTPS supported protocols
#
credentialStore.cyberark.config.ws.supportedProtocols={{ sdc_credentialStores_cyberark_ws_supportedprotocols | default("TLSv1.2") }}

# If the hostname of the CyberArk Central Credential Provider web-services should be verified against the domain
# defined in the HTTPS certificate.
credentialStore.cyberark.config.ws.hostnameVerifier.skip={{ sdc_credentialStores_cyberark_ws_hostnameverifier_skip | default("false") }}

# If using HTTPS and the CyberArk Central Credential Provider web-services is configured to require client side
# certificates, the client certificate must be available in this keystore file  (or in the JDK default truststore).
#
# The path can be absolute or relative, if  relative it is looked for in the Data Collector configuration directory, etc/
#
# There is no default for this property
credentialStore.cyberark.config.ws.keystoreFile={{ sdc_credentialStores_cyberark_ws_keystorefile | default("") }}

# The password to access the keystore file.
#
# There is no default for this property
credentialStore.cyberark.config.ws.keystorePassword={{ sdc_credentialStores_cyberark_ws_keystorepassword | default("") }}

# The password to access the certificate within the keystore file.
#
# There is no default for this property
credentialStore.cyberark.config.ws.keyPassword={{ sdc_credentialStores_cyberark_ws_keypassword | default("") }}
