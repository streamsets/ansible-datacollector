#!/bin/bash
#
# Copyright 2017 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script is sourced when using the data collector initd scripts
# Refer to the initd/README file for details
#

# user that will run the data collector, it must exist in the system
#
export SDC_USER={{ sdc_user }}

# group of the user that will run the data collector, it must exist in the system
#
export SDC_GROUP={{ sdc_group }}

# directory where the data collector will store pipelines and their runtime information
#
export SDC_DATA={{ sdc_data_dir }}

# directory where the data collector will read pipeline resource files from
#
export SDC_RESOURCES={{ sdc_resources_dir }}

# directory where the data collector write its logs
#
export SDC_LOG={{ sdc_log_dir }}

# directory where the data collector will read its configuration
#
export SDC_CONF={{ sdc_conf_dir }}

# Includes the JARs in extra lib in the root classloader, this is required to support
# Snappy compression in Cassandra
#
export SDC_ROOT_CLASSPATH=${SDC_ROOT_CLASSPATH:-${SDC_DIST}/root-lib/'*'}

# SDC upon start will verify that `ulimit -n` will return at least the following,
# otherwise SDC start will fail.
export SDC_FILE_LIMIT="${SDC_FILE_LIMIT:-32768}"

# JVM options for the data collector process
#
export SDC_JAVA_OPTS="-Xmx{{ sdc_java_opts_mem | default('1024m') }} -Xms{{ sdc_java_opts_mem | default('1024m') }} -server -XX:-OmitStackTraceInFastThrow ${SDC_JAVA_OPTS}"

# Indicate that MapR Username/Password security is enabled
#export SDC_JAVA_OPTS="-Dmaprlogin.password.enabled=true ${SDC_JAVA_OPTS}"

# Java 8 (JDK 1.8) specific options
# by default, use CMS garbage collector
export SDC_JAVA8_OPTS=${SDC_JAVA8_OPTS:-"-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Djdk.nio.maxCachedBufferSize=262144"}

# Enables/disables the JVM security manager
#
export SDC_SECURITY_MANAGER_ENABLED=true

# Produce heap dump when SDC will die on OutOfMemoryError (into
export SDC_HEAPDUMP_ON_OOM=true

# Optional path for the heap dump file, default is $SDC_LOG/heapdump
#export SDC_HEAPDUMP_PATH=

# Enable GC logging automatically
export SDC_GC_LOGGING=true

# SDC will by default only run on Oracle JDK, any other JDK has to be explicitly enabled
export SDC_ALLOW_UNSUPPORTED_JDK={{ sdc_allow_unsupported_jdk | lower }}

{% if jmx_enable == true %}
# JMX Configuration
export SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dcom.sun.management.jmxremote \
-Dcom.sun.management.jmxremote.port={{ jmx_port }} \
-Dcom.sun.management.jmxremote.local.only={{ jmx_local_only | lower }} \
-Dcom.sun.management.jmxremote.authenticate={{ jmx_authenticate | lower }} \
{% if jmx_authenticate == true and jmx_enable == true %}
-Dcom.sun.management.jmxremote.password.file=${SDC_CONF}/jmxremote.password \
-Dcom.sun.management.jmxremote.access.file=${SDC_CONF}/jmxremote.access \
{% endif %}
{% if jmx_ssl == true %}
-Djavax.net.ssl.keyStore={{ jmx_keystore | default("${SDC_CONF}/keystore.jks") }} \
-Djavax.net.ssl.keyStorePassword={{ jmx_keystore_password | default("$(cat ${SDC_CONF}/keystore-password.txt)") }} \
-Dcom.sun.management.jmxremote.registry.ssl={{ jmx_ssl | lower }}"
{% endif %}
-Dcom.sun.management.jmxremote.ssl={{ jmx_ssl | lower }}"
{% endif %}

# Enables/disables the JVM security manager
#
export SDC_SECURITY_MANAGER_ENABLED={{ sdc_enable_security_manager | default("true") }}
