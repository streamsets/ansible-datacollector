---
# file: roles/sdc/tasks/main.yml
- name: Create deployment group
  group: name="{{ sdc_group }}" system=yes

- name: Create deployment user
  user: name="{{ sdc_user }}" createhome=no system=yes group="{{ sdc_group }}"

- name: Make temporary download dir
  file: dest="/tmp/sdc" state=directory mode=755 owner="{{ sdc_user }}" group="{{ sdc_group }}"

- name: Fetch SDC tarball
  sudo_user: "{{ sdc_user }}"
  get_url:
    url="{{ sdc_release_url }}"
    dest="/tmp/sdc/{{ sdc_release }}.tgz"
  register: new_sdc_tarball

- name: Create installation directory
  file: dest="{{ sdc_install_base }}" state=directory mode=755 owner="{{ sdc_user }}" group="{{ sdc_group }}"

# In case we don't have a new tarball but its not been extracted we do an extra check.
- name: Check for existing installation
  stat: path="{{ sdc_dist }}"
  register: sdc_dist_exists

- name: Extract SDC tarball
  sudo_user: "{{ sdc_user }}"
  unarchive:
    src="/tmp/sdc/{{ sdc_release }}.tgz"
    dest="{{ sdc_install_base }}/"
    copy=no
  register: sdc_tarball_extracted
  when: new_sdc_tarball | changed or sdc_dist_exists.stat.isdir is not defined

- name: Rename to Version
  command: "mv {{ sdc_install_base }}/{{ sdc_release }} /{{ sdc_install_base }}/{{ sdc_version }}"
  when: sdc_tarball_extracted | changed

- name: Symlink to current
  file:
    src="{{ sdc_dist }}"
    dest="{{ sdc_install_base }}/current"
    state=link

- name: Create required directories
  file:
    dest="{{ item }}"
    state=directory
    mode=0755
    owner={{ sdc_user }}
    group={{ sdc_group }}
  with_items:
    - "{{ sdc_conf_dir }}"
    - "{{ sdc_libexec_dir }}"

# Not all configs have been templated yet. These are all the default configs.
- name: Copy default configs
  sudo_user: "{{ sdc_user }}"
  command: "cp {{ sdc_dist }}/etc/{{ item }} {{ sdc_conf_dir }}/"
  args:
    creates: "{{ sdc_conf_dir }}/{{ item }}"
  with_items:
    - basic-realm.properties
    - digest-realm.properties
    - email-password.txt
    - form-realm.properties
    - keystore-password.txt
    - keystore.jks
    - sdc-log4j.properties
    - sdc-security.policy
    - stagelibswhitelist.properties
    - sdc.properties
  when: sdc_conf_dir != "{{ sdc_dist }}/etc"

# Install templated configurations
- name: Deploy init script
  template: dest="/etc/init.d/{{ sdc_instance }}" src=initd.j2 owner=root group=root mode=755
  register: sdc_init_updated
  notify: "Restart {{ sdc_instance }}"

- name: Deploy env script
  template:
    dest="{{ sdc_libexec_dir }}/sdcd-env.sh"
    src=sdcd-env.sh.j2 owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=755
  notify: "Restart {{ sdc_instance }}"

- name: Deploy config template
  sudo_user: "{{ sdc_user }}"
  template: dest="{{ sdc_conf_dir }}/sdc.properties" src=sdc.properties.j2
  notify: "Restart {{ sdc_instance }}"

- name: Install security policy
  sudo_user: "{{ sdc_user }}"
  template: dest="{{ sdc_conf_dir }}/sdc-security.policy" src=sdc-security.policy.j2
  notify: "Restart {{ sdc_instance }}"

- name: Install JMX access control files
  sudo_user: "{{ sdc_user }}"
  template:
    dest="{{ sdc_conf_dir }}/{{ item }}"
    src="{{ item }}.j2"
    owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=400
  with_items:
    - jmxremote.access
    - jmxremote.password
  notify: "Restart {{ sdc_instance }}"
  when: jmx_authenticate == true

- name: systemd daemon-reload
  sudo: yes
  command: /usr/bin/systemctl daemon-reload
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7' and sdc_init_updated | changed

- name: "Ensure {{ sdc_instance }} is running"
  sudo: yes
  service: name="{{ sdc_instance }}" state=started
