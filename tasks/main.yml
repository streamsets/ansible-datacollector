---
# file: roles/sdc/tasks/main.yml
- name: Create deployment group
  group: name="{{ sdc_group }}" system=yes

- name: Create deployment user
  user: name="{{ sdc_user }}" createhome=no system=yes group="{{ sdc_group }}"

- name: Make temporary download dir
  file: dest="/tmp/sdc" state=directory mode=755 owner="{{ sdc_user }}" group="{{ sdc_group }}"

- name: Fetch SDC tarball
  become_user: "{{ sdc_user }}"
  get_url:
    url="{{ sdc_release_url }}"
    dest="/tmp/sdc/{{ sdc_release }}.tgz"
  register: new_sdc_tarball

- name: Create installation directory
  file: dest="{{ sdc_install_base }}" state=directory mode=755 owner="{{ sdc_user }}" group="{{ sdc_group }}"

# In case we don't have a new tarball but its not been extracted we do an extra check.
- name: Check for existing installation
  stat: path="{{ sdc_dist }}"
  register: sdc_dist_exists

- name: Extract SDC tarball
  become_user: "{{ sdc_user }}"
  unarchive:
    src="/tmp/sdc/{{ sdc_release }}.tgz"
    dest="{{ sdc_install_base }}/"
    copy=no
  register: sdc_tarball_extracted
  when: new_sdc_tarball | changed or sdc_dist_exists.stat.isdir is not defined

- name: Rename to Version
  command: "mv {{ sdc_install_base }}/{{ sdc_release }} {{ sdc_install_base }}/{{ sdc_version }}"
  when: sdc_tarball_extracted | changed

- name: Symlink to current
  file:
    src="{{ sdc_dist }}"
    dest="{{ sdc_install_base }}/current"
    state=link

- name: Create required directories
  file:
    dest="{{ item }}"
    state=directory
    mode=0755
    owner={{ sdc_user }}
    group={{ sdc_group }}
  with_items:
    - "{{ sdc_conf_dir }}"
    - "{{ sdc_libexec_dir }}"
    - "{{ sdc_data_dir }}"
    - "{{ sdc_log_dir }}"

# Not all configs have been templated yet. These are all the default configs.
# Copy all of the files.  Some may be changed by templates later.
- name: Copy default configs
  become_user: "{{ sdc_user }}"
  command: "cp -rn {{sdc_dist }}/etc/. {{ sdc_conf_dir }}/"
  when: sdc_conf_dir != "sdc_dist/etc"

# Install templated configurations
- name: Deploy init script
  template: dest="/etc/init.d/{{ sdc_instance }}" src=initd.j2 owner=root group=root mode=755
  register: sdc_init_updated
  notify: "Restart {{ sdc_instance }}"
  when: not ansible_service_mgr == "systemd"

- name: Deploy systemd script
  template:
    dest: /etc/systemd/system/{{ sdc_instance }}.service
    src: systemd.service.j2
    owner: root
    group: root
    mode: 644
  register: sdc_systemd_updated
  modify: "Restart {{ sdc_instance }}"
  when: ansible_service_mgr == "systemd"


- name: Deploy env script (sdcd-env.sh)
  template:
    dest="{{ sdc_libexec_dir }}/sdcd-env.sh"
    src=sdcd-env.sh.j2 owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=755
  notify: "Restart {{ sdc_instance }}"

# under systemd, the 'sdc-env.sh' script is used.
# just deploy our template to both places
- name: Deploy env script (sdc-env.sh)
  template:
    dest="{{ sdc_libexec_dir }}/sdc-env.sh"
    src=sdcd-env.sh.j2 owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=755
  notify: "Restart {{ sdc_instance }}"

- name: Deploy config template
  become_user: "{{ sdc_user }}"
  template: 
    dest="{{ sdc_conf_dir }}/sdc.properties"
    src="{{ sdc_properties }}"
  notify: "Restart {{ sdc_instance }}"

- name: Deploy LDAP config
  become_user: "{{ sdc_user }}"
  template:
    dest="{{ sdc_conf_dir }}/{{ item }}"
    src="{{ item }}.j2"
    owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=400
  with_items:
    - ldap-login.conf
    - ldap-bind-password.txt
  notify: "Restart {{ sdc_instance }}"
  when: http_authentication_login_module == "ldap"

- name: Deploy Credentials config
  become_user: "{{ sdc_user }}"
  template:
    dest="{{ sdc_conf_dir }}/credential-stores.properties"
    src=credential-stores.properties.j2
  notify: "Restart {{ sdc_instance }}"
  when: sdc_credentialStores is defined

- name: Deploy vault secret id file, if exists
  become_user: "{{ sdc_user }}"
  copy:
    src: "vault-secret-id"
    dest: "{{ sdc_conf_dir }}/vault-secret-id"
    mode: 0600
  notify: "Restart {{ sdc_instance }}"
  ignore_errors: true
  when: (sdc_credentialStores is defined) and ( sdc_credentialStores | search("vault") )

- name: Install security policy
  become_user: "{{ sdc_user }}"
  template: dest="{{ sdc_conf_dir }}/sdc-security.policy" src=sdc-security.policy.j2
  notify: "Restart {{ sdc_instance }}"

- name: Install JMX access control files
  become_user: "{{ sdc_user }}"
  template:
    dest="{{ sdc_conf_dir }}/{{ item }}"
    src="{{ item }}.j2"
    owner="{{ sdc_user }}"
    group="{{ sdc_group }}"
    mode=400
  with_items:
    - jmxremote.access
    - jmxremote.password
  notify: "Restart {{ sdc_instance }}"
  when: jmx_authenticate == true

- name: "Ensure {{ sdc_intance }} is running in systemd"
  become: yes
  systemd:
    daemon_reload: "{{ sdc_systemd_updated.changed }}"
    name: "{{ sdc_instance }}"
    enabled: yes
    state: started
  when: ansible_service_mgr == "systemd"

- name: "Ensure {{ sdc_instance }} is running in initd"
  become: yes
  service:
    name: "{{ sdc_instance }}"
    state: started
    use: service
  when: not ansible_service_mgr == "systemd"
